;;
(load "webotslib.l")
(setq POPULATION_SIZE 50) (setq NUM_GENERATIONS 25) (setq FILE_NAME "fittest.txt")
(setq NUM_SENSORS 8) (setq NUM_WHEELS 2)
(setq GENOTYPE_SIZE (* NUM_SENSORS NUM_WHEELS))
(setq *init* nil) (setq demo t)
(setq ELITE_PART 0.1) ;; part of the population that is cloned from one generation to the next
(defun random_get_integer (max) (random (round max)))
(defun random_get_uniform () (random 1.0))
(defun random_get_gaussian () ;; polar form of the Box-Muller transformation
  (let (x1 x2 w (flag t))
    (while flag (setq x1 (- (* 2.0 (random_get_uniform)) 1.0))
	   (setq x2 (- (* 2.0 (random_get_uniform)) 1.0))
	   (setq w (+ (* x1 x1) (* x2 x2)))
	   (if (< w 1.0) (setq flag nil)))
    (* x1 (sqrt (/ (* -2.0 (log w)) w)))))
(defconstant MUTATION_PROBABLITY 0.06)
(defconstant MUTATION_DEVIATION 0.2)
(defstruct _Genotype_ genes fitness)
(defun genotype_fread (g fd) (dotimes (i genotype_size) (setf (elt (g . genes) i) (read fd))) g)
(defun genotype_fwrite (g fd) (dotimes (i genotype_size) (print (elt (g . genes) i) fd)) g)
(defun genotype_create ()
  (let ((gen (instantiate _Genotype_)))
    (setq (gen . fitness) 0.0) (setq (gen . genes) (instantiate vector genotype_size))
    (dotimes (i genotype_size) (setf (elt (gen . genes) i) (random_get_uniform)))
    gen))
(defun genotype_clone (g)
  (let ((clone (genotype_create)))
    (dotimes (i genotype_size) (setf (elt (clone . genes) i) (elt (g . genes) i)))
    (setq (clone . fitness) (g . fitness))
    clone))
(defun genotype_mutate (g) ;; mutate genes with given probability and deviation
  (dotimes (i genotype_size)
    (if (< (random_get_uniform) MUTATION_PROBABLITY)
	(incf (elt (g . genes) i) (* (random_get_gaussian) MUTATION_DEVIATION)))))
(defun genotype_crossover (parent1 parent2) ;; crossover
  (let ((child (genotype_create)) (locus1 (random_get_integer genotype_size))
	(locus2 (random_get_integer genotype_size)) tmp)
    (when (> locus1 locus2) (setq tmp locus1) (setq locus1 locus2) (setq locus2 tmp))
    (dotimes (i genotype_size)
      (if (and (> i locus1) (< i locus2))
	  (setf (elt (child . genes) i) (elt (parent1 . genes) i))
	(setf (elt (child . genes) i) (elt (parent2 . genes) i))))
    child))
(defstruct _Population_  genotypes  size) 
(defun population_create (pop_size gen_size)
  (let ((p (instantiate _Population_)))
    (setq (p . size) pop_size)
    (setq genotype_size gen_size)
    (setq (p . genotypes) (instantiate vector pop_size))
    (dotimes (i pop_size) (setf (elt (p . genotypes) i) (genotype_create)))
    p))
(defun population_select_parent (p)
  (while t
    (let ((index (random_get_integer (p . size))))
      (if (<= index (random_get_integer (p . size)))
	  (return-from population_select_parent (elt (p . genotypes) index))))))
(defun compare_genotype (a b) (> (a . fitness) (b . fitness)))
(defun population_reproduce (p)
  (let ((next_generation (instantiate vector (p . size))))
    (setq (p . genotypes) (sort (p . genotypes) #'compare_genotype))
    (dotimes (i (p . size))
      (let (child mom dad)
	(cond
	 ((< i  (* ELITE_PART (p . size)))
	  (setq child (genotype_clone (elt (p . genotypes) i))) )
	 (t (setq mom (population_select_parent p)) (setq dad (population_select_parent p))
	    (setq child (genotype_crossover mom dad))
	    (genotype_mutate child)))
	(setq (child . fitness) 0.0)
	(setf (elt next_generation i) child)))
    (setq (p . genotypes) next_generation)))
(defun population_get_fittest (p)
  (let ((fittest (elt (p . genotypes) 0)) candidate)
    (do ((i 1 (1+ i))) ((>= i (p . size)))
	(setq candidate (elt (p . genotypes) i))
	(if (> (candidate . fitness) (fittest . fitness)) (setq fittest candidate)))
    fittest))
(defun population_compute_average_fitness (p)
  (let ((sum_fitness 0.0))
    (dotimes (i (p . size)) (incf sum_fitness ((elt (p . genotypes) i) . fitness)))
    (/ sum_fitness (p . size))))
(defun draw_scaled_line (generation y1 y2)
  (let ((XSCALE (/ display_width (float NUM_GENERATIONS))) (YSCALE 10.0))
    (wb_display_draw_line display (* (- generation 0.5) XSCALE)
			  (- display_height (* y1 YSCALE))
			  (* (+ generation 0.5) XSCALE)
			  (- display_height (* y2 YSCALE)))))
(setq prev_best_fitness 0.0) (setq prev_average_fitness 0.0)
(defun plot_fitness (generation best_fitness average_fitness)
  (when (> generation 0)
    (wb_display_set_color display #xff0000)
    (draw_scaled_line generation prev_best_fitness best_fitness);
    (wb_display_set_color display #x00ff00)
    (draw_scaled_line generation prev_average_fitness average_fitness))
  (format t "best fitness: ~A generation=~A genotype.genes=~A~%"
	  best_fitness generation ((elt (population . genotypes) generation) . genes))
  (format t "average fitness: ~A, previous ~A~%" average_fitness prev_average_fitness)
  (setq prev_best_fitness best_fitness)
  (setq prev_average_fitness average_fitness))
(defun run_seconds (seconds)
  (let ((n (round (/ (* 1000.0 seconds) time_step))) key)
    (dotimes (i n)
      (when (and demo (find (setq key (wb_keyboard_get_key)) (list #\ #\O #\o) :test #'equal))
	(setq demo nil) (format t ";; run_seconds key=~A kkkkkkkkkkkkkkk~%" key)
	(return-from run_seconds nil))
      ;;(unix:usleep (* 1000 (round time_step)))
      (wb_robot_step time_step))))
(defun measure_fitness nil
  (let* ((load_trans (cout-float-vector (wb_supervisor_field_get_sf_vec3f load_translation) 3))
	 (dx (- (elt load_trans 0) (elt load_trans0 0)))
	 (dz (- (elt load_trans 2) (elt load_trans0 2))))
    ;;(format t ";; load_trans0 ~A, ~A~%" (elt load_trans0 0) (elt load_trans0 2))
    ;;(format t ";; dx=~A,dz=~A~%" dx dz)
    (sqrt (+ (* dx dx) (* dz dz)))))
(defun send_genes (genotype)
  (wb_emitter_send emitter (genotype . genes) (* GENOTYPE_SIZE (byte-size :double)))
  (wb_supervisor_field_set_sf_vec3f robot_translation robot_trans0)
  (wb_supervisor_field_set_sf_rotation robot_rotation robot_rot0)
  (wb_supervisor_field_set_sf_vec3f load_translation load_trans0))
(defun run_optimization ()
  (wb_keyboard_disable)
  (format t "---~%starting GA optimization ...~%")
  (format t "population size is ~d, genome size is ~d~%" POPULATION_SIZE GENOTYPE_SIZE)
  (dotimes (i NUM_GENERATIONS)
    (dotimes (j POPULATION_SIZE)
      (send_genes (elt (population . genotypes) j))
      (run_seconds 60.0)
      (setq ((elt (population . genotypes) j) . fitness) (measure_fitness))
      (setq robot (wb_supervisor_node_get_from_def "ROBOT"))
      (wb_supervisor_node_reset_physics robot))
    (plot_fitness i ((population_get_fittest population) . fitness) ;; best_fitness
		  (population_compute_average_fitness population))
    (if (< i (- NUM_GENERATIONS 1)) (population_reproduce population)))
  (format t "GA optimization terminated.~%");
  (let ((fittest (population_get_fittest population))
	(outfile (open FILE_NAME :direction :output)))
    (cond (outfile (genotype_fwrite fittest outfile) (close outfile)
		   (format t "wrote best genotype into ~s~%" FILE_NAME))
	  (t (format t "unable to write ~s~%" FILE_NAME))))
  ;;(population_destroy population)
  )
(defun run_demo nil
  (wb_keyboard_enable time_step)
  (format t "---~%running demo of best individual ...~%")
  (format t "select the 3D window and push the 'O' key~%")
  (format t "to start genetic algorithm optimization~%")
  (unless (probe-file FILE_NAME)
    (format t "unable to read ~s~%" FILE_NAME) (return-from run_demo nil))
  (setq infile (open FILE_NAME :direction :input))
  (setq genotype (genotype_create))
  (setq genotype (genotype_fread genotype  infile))
  (close infile)
  (while demo
    (send_genes genotype)
    (run_seconds 60.0)
    (setq (genotype . fitness) (measure_fitness))
    (setq robot (wb_supervisor_node_get_from_def "ROBOT"))
    (wb_supervisor_node_reset_physics robot)))
(defun main-init nil
  (wb_robot_init) (setq time_step (wb_robot_get_basic_time_step))
  (format t ";; main-init time_step=~A~%" time_step)
  (setq emitter (wb_robot_get_device "emitter")) (setq display (wb_robot_get_device "display"))
  (setq display_width (wb_display_get_width display))
  (setq display_height (wb_display_get_height display))
  (wb_display_draw_text display "fitness" 2 2)
  (setq population (population_create POPULATION_SIZE GENOTYPE_SIZE))
  (setq robot (wb_supervisor_node_get_from_def "ROBOT"))
  (setq robot_translation (wb_supervisor_node_get_field robot "translation"))
  (setq robot_rotation (wb_supervisor_node_get_field robot "rotation"))
  (setq robot_trans0 (cout-float-vector (wb_supervisor_field_get_sf_vec3f robot_translation) 3))
  (setq robot_rot0 (cout-float-vector (wb_supervisor_field_get_sf_rotation robot_rotation) 4))
  (setq load (wb_supervisor_node_get_from_def "LOAD"))
  (setq load_translation (wb_supervisor_node_get_field load "translation"))
  (setq load_trans0 (cout-float-vector (wb_supervisor_field_get_sf_vec3f load_translation) 3))
  (setq *init* t))

(defun itimer-on nil
  (unless *init* (main-init))
  (setq *top-selector-interval* 0.01)
  (pushnew 'main-step *timer-job*))
(defun itimer-off nil (setq *timer-job* (remove 'main-step *timer-job*)))
;;(itimer-on)
(defun main nil
  (main-init)
  (if demo (run_demo))
  (run_optimization)
  (wb_robot_cleanup))
(unix::system (format nil "cp ../advanced_genetic_algorithm_supervisor/fittest.txt ."))
(main)

