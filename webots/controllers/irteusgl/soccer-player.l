;;
(load "webotslib.l")
(defvar *init* nil)
(setq ROBOTS 6)
(setq TIME_STEP 64)
(setq RAND_MAX 70)
(defun robot_get_id (typ p) (* 3 (+ (- p #\1) (if (= typ #\y) (/ ROBOTS 2) 0))))
(defun robot_get_x (typ p) (elt packet (robot_get_id typ p)))
(defun robot_get_y (typ p) (elt packet (+ (robot_get_id typ p) 1)))
(defun robot_get_orientation (typ p) (elt packet (+ (robot_get_id typ p) 2)))
(defun ball_get_x () (elt packet (* ROBOTS 3)))
(defun ball_get_y () (elt packet (+ (* ROBOTS 3) 1)))

(defun main ()
  (unless *init* (main-init))
  (do-until-key (main-step)))
(defun main-init ()
  (setq counter 0)
  (setq max  50)
  (wb_robot_init)
  (setq name (cout-fstring (wb_robot_get_name) 2))
  (format t ";; name=~A~%" name)
  (setq team (elt name 0))
  (setq player (elt name 1))
  (setq receiver (wb_robot_get_device "receiver"))
  (setq left_motor (wb_robot_get_device "left wheel motor"))
  (setq right_motor (wb_robot_get_device "right wheel motor"))
  ;;
  (wb_motor_set_position left_motor INFINITY)
  (wb_motor_set_position right_motor INFINITY)
  (wb_motor_set_velocity left_motor 0.0)
  (wb_motor_set_velocity right_motor 0.0)
  ;;srand(team + player);
  (wb_receiver_enable receiver 64)
  (format t ";; main-init~%")
  (setq *init* t))

(defun main-step nil
  (wb_robot_step TIME_STEP)
  (setq left_speed 0.0 right_speed 0.0)
  (when (> (setq rec_len (wb_receiver_get_queue_length receiver)) 0)
    (format t ";; rec_len=~A~%" rec_len)
    (format t ";; team=~A player=~A~%" team player)
    (setq packet (cout-float-vector (wb_receiver_get_data receiver) (+ 2 (* 3 robots))))
    (format t ";; packet=~A~%" packet)
    (case
     player
     ((#\1 #\2)
      (incf counter)
      (if (< counter max)
	  (setq left_speed 10.0 right_speed 10.0)
	(setq left_speed -10.0 right_speed 10.0))
      (if (= counter 100) (setq counter 0))
      (setq max (+ 30 (/ (random RAND_MAX) RAND_MAX 70.0)))
      (format t ";; 1,2 left_speed right_speed =~A ~A~%" left_speed right_speed)
      )
     ((#\3)
      (setq y (robot_get_y team player))
      (setq d (- (ball_get_y) y))
      (if (and (> d 0.01) (< y 0.16))
	  (setq right_speed 10.0 left_speed 10.0)
	(if (and (< d -0.01) (> y -0.16))
	    (setq right_speed -10.0 left_speed -10.0)))
      (format t ";; 3 left_speed right_speed =~A ~A~%" left_speed right_speed)
      ))
    (wb_receiver_next_packet receiver)
    )
  (wb_motor_set_velocity left_motor  left_speed)
  (wb_motor_set_velocity right_motor right_speed)
  )
(defun itimer-on nil
  (unless *init* (main-init))
   (setq *top-selector-interval* 0.01)
   (pushnew 'main-step *timer-job*))
(defun itimer-off nil (setq *timer-job* (remove 'main-step *timer-job*)))
(main-init)
(while t (main-step))
;;(itimer-on)
;;(main)

